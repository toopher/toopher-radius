PERL_VERSION=5.12.3
FREERAD_TAG=toopher-RADIUS/1.0

FREERAD_BUILD=${PWD}/toopher-RADIUS-build
STATICPERL_BUILD=${PWD}/.staticperl

mkdir -p ${FREERAD_BUILD}
rm -fr ${FREERAD_BUILD}/*

echo Download/Configure/Build/Install staticperl
# build and install staticperl to .staticperl/perl/bin

# uncomment the next line to re-install everything from CPAN
# rm .staticperl/perl/staticstamp.*

# otherwise just do this
cp -fr .staticperl/src/perl-${PERL_VERSION}/libperl.a .staticperl/perl/bin/libperl.a
cp -fr .staticperl/src/perl-${PERL_VERSION}/libperl.a .staticperl/perl/lib/CORE/libperl.a

#now (re)build staticperl
./staticperl fetch
./staticperl install

echo
echo Installing/Updating CPAN modules.  Some modules might take several attempts.
# install needed CPAN modules.  This can still fail for unknown reasons, so
# grep for failure messages and retry for each module
CPAN_MODULES=( Digest::MD5 YAML LWP::UserAgent Encode Data::Dumper Digest::SHA
  Digest::SHA1 Digest::HMAC_SHA1 Net::OAuth::ConsumerRequest Crypt::SSLeay
  Net::SSLeay JSON::XS JSON Net::LDAP HTTP::Request::Common Try::Tiny
  URL::Encode Term::ReadPassword Data::HexDump Authen::Radius File::Copy
  Digest::SHA Mozilla::CA LWP::Protocol::https)

for module in "${CPAN_MODULES[@]}"
do
  counter=0
  mod_install_success=0
  while [ $mod_install_success -eq 0 ]
  do
    let counter=counter+1
    echo Installing $module \(attempt ${counter}\)
    ./staticperl instcpan $module 2>&1 | grep -q 'fatal error'
    mod_install_success=$?
  done
done

STATICPERL_OPTS="--noclean -vvv --strip none -MConfig_heavy.pl -MConfig -MJSON::XS \
  -MJSON -MData::Dumper -MExtUtils::Embed -Mdiagnostics -MFindBin -Mlib \
  -MNet::OAuth::ConsumerRequest -MHTTP::Request::Common -MEncode \
  -MNet::LDAP -MExtUtils::MakeMaker -MLWP::UserAgent -MClass::Struct \
  -MDigest::HMAC_SHA1 -MHTTP::Headers::Util \
  -MNet::OAuth::SignatureMethod::HMAC_SHA1 -MNet::LDAP::Bind \
  -MNet::LDAP::Search -MURI::_foreign -MHTTP::Config -MURI \
  -MURI::_server -MURI::file -MURI::http -MURI::https \
  -MMIME::Base64 \
  -Mutf8_heavy.pl -Municore/heavy.pl -MScalar::Util -MList::Util -MNet::SSLeay \
  -MLWP::Protocol::https -MTry::Tiny -MURL::Encode \
  -MTerm::ReadPassword -MData::HexDump -MTime::HiRes -MAuthen::Radius \
  -MFile::Copy -MDigest::SHA "

echo STATICPERL_OPTS is ${STATICPERL_OPTS}
# make a perl executable and libperl that can be statically linked into rlm_perl
./staticperl mkperl ${STATICPERL_OPTS} || (echo 'Failed to build staticperl' && exit 1)

cp -fr ./libperl.a .staticperl/perl/bin/libperl.a
cp -fr ./libperl.a .staticperl/perl/lib/CORE/libperl.a


# add staticperl to the PATH so the script uses the correct perl
export PATH=${STATICPERL_BUILD}/bin:${PATH}
PERL=`command -v perl`
echo PERL is $PERL

#clean up
rm *.o
rm *.a

# now make a perl bundle that can be statically linked into rlm_perl
./staticperl mkbundle ${STATICPERL_OPTS} || (echo 'Failed to build staticperl bundle' && exit 1)

echo Downloading Freeradius Source
FREERAD=freeradius-server
git archive --format=tar --remote=git@bitbucket.org:toopher/freeradius-server.git ${FREERAD_TAG} > freeradius-server.tar
mkdir ${FREERAD}
pushd ${FREERAD}
tar xvf ../freeradius-server.tar
popd
rm freeradius-server.tar

FREERAD_PERL=${FREERAD}/src/modules/rlm_perl
# add static perl bundle to freeradius rlm_perl source dir
cp -f bundle.c ${FREERAD_PERL}/
cp -f bundle.h ${FREERAD_PERL}/
rm bundle.*

# make rlm_perl.c invoke the staticperl xs_init function
sed -i '/#include <semaphore.h>/ a #include "bundle.h"' ${FREERAD_PERL}/rlm_perl.c
sed -i '/newXS(\"DynaLoader::boot_DynaLoader\", boot_DynaLoader, file);/ a  staticperl_xs_init();' ${FREERAD_PERL}/rlm_perl.c

# patch rlm_perl Makefile
#sed -i "s#@perl_cflags@#`cat bundle.ccopts`#g" ${FREERAD_PERL}/Makefile.in
#sed -i "s#@perl_ldflags@#`cat bundle.ldopts`#g" ${FREERAD_PERL}/Makefile.in
sed -i "s/rlm_perl.c/rlm_perl.c bundle.c/g" ${FREERAD_PERL}/Makefile.in

# explicitly disable freeradius DHCP, because configure doesn't seem to obey me.
sed -i "s/WITH_DHCP=yes/WITH_DHCP=no/g" ${FREERAD}/configure
sed -i "s/WITH_DHCP=yes/WITH_DHCP=no/g" ${FREERAD}/configure.in

# patch the rlm_eap Makefile, because it's broken
sed -i 's/= radeapclient/= radeapclient$(EXEEXT)/g' ${FREERAD}/src/modules/rlm_eap/Makefile.in

# build freeradius
pushd ${FREERAD}

# configure freeradius source
# LIBS environment variable adds additional libraries to the FreeRADIUS build path
# lber.lib is missing in the FreeRADIUS makefile, so it is explicitly defined here
LIBS="-llber" ./configure --disable-shared --enable-static --prefix=${FREERAD_BUILD} \
  --with-rlm_krb5=no --with-rlm_pam=no --with-rlm_eap_ikev2=no --with-rlm_sql_oracle=no \
  --with-rlm_chap=no --with-rlm_mschap=no --with-rlm_python=no --with-dhcp=no \
  --with-rlm_wimax=no --with-rlm_ippool=no --with-rlm_otp=no --with-rlm_ldap=yes \
  --with-rlm_otp=no --with-rlm_sql=no --with-rlm_sql_iodbc=no --with-rlm_sql_mysql=no \
  --with-rlm_sql_postgresql=no --with-rlm_sqlcounter=no --with-rlm_unix=no \
  --with-rlm_sql_unixodbc=no --with-openssl=yes --with-rlm_dbm=no --with-rlm_eap_ttls=yes \
  --with-rlm_eap_tnc=yes \

# use make -k because a couple targets fail right now (radmin.exe and radeapclient.exe).
# TODO: fix so we can do a clean build

make -k
make -k install

echo ******************************************************************
echo *****  Certain errors in the above build process are normal  *****
echo ******************************************************************

popd

echo Moving over some libs that don\'t seem to play well w/ staticperl
cp -r .staticperl/perl/lib/Mozilla ${FREERAD_BUILD}/etc/raddb/
cp perl.exe ${FREERAD_BUILD}/sbin/
rm perl.exe

echo Copy configuration templates to /toopher
mkdir ${FREERAD_BUILD}/toopher
cp -fr ../freeradius/* ${FREERAD_BUILD}/toopher
cp ../freeradius/etc/raddb/toopher_radius.pl ${FREERAD_BUILD}/etc/raddb/
cp ../README.html ${FREERAD_BUILD}/
cp ../linux/prep-config-files.pl ${FREERAD_BUILD}

echo

echo get rid of sites-available/default - will come from templated version
rm ${FREERAD_BUILD}/etc/raddb/sites-available/*
echo get rid of everything in sites-enabled - will be copied by config script
rm ${FREERAD_BUILD}/etc/raddb/sites-enabled/*

echo moving root dictionary to /etc/raddb/dictionary
cp ${FREERAD}/share/dictionary ${FREERAD_BUILD}/etc/raddb/dictionary

echo moving the RFC/vendor dictionary files directly to /etc/raddb/dictionaries
mkdir ${FREERAD_BUILD}/etc/raddb/dictionaries
cp -r ${FREERAD}/share/dictionary.* ${FREERAD_BUILD}/etc/raddb/dictionaries
rm ${FREERAD_BUILD}/etc/raddb/dictionary.*

echo point dictionary includes to /etc/raddb/dictionaries subdirectory
sed -i 's/INCLUDE dictionary/INCLUDE dictionaries\\dictionary/g' ${FREERAD_BUILD}/etc/raddb/dictionary

# add in the toopher dictionary
echo \$INCLUDE dictionary.toopher >> ${FREERAD_BUILD}/etc/raddb/dictionary

# create a shortcut batch file to run the radius server
cp -r installed_scripts/* ${FREERAD_BUILD}

echo Copying cygwin dlls necessary to run in normal windows environment
CYGWIN_DLLS=( cygwin1.dll cyggdbm-4.dll cyglber-2-4-2.dll cygldap-2-4-2.dll
  cygldap_r-2-4-2.dll cygcrypto-1.0.0.dll cygz.dll
  cyggcc_s-1.dll cygsasl2-2.dll cygsasl2-3.dll cygssl-1.0.0.dll
  cygcrypt-0.dll )
for cyg_dll in "${CYGWIN_DLLS[@]}"
do
  cp /bin/${cyg_dll} ${FREERAD_BUILD}/sbin/${cyg_dll}
done

echo creating toopher_cygwin_freeradius.tgz
tar czvf toopher_cygwin_freeradius.tgz ${FREERAD_BUILD}
